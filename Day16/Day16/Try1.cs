using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Day16
{
    internal class Try1
    {

        public static void Run()
        {
            Console.WriteLine("Day16 - Try1");

            //string puzzle = "###############\r\n#.......#....E#\r\n#.#.###.#.###.#\r\n#.....#.#...#.#\r\n#.###.#####.#.#\r\n#.#.#.......#.#\r\n#.#.#####.###.#\r\n#...........#.#\r\n###.#.#####.#.#\r\n#...#.....#.#.#\r\n#.#.#.###.#.#.#\r\n#.....#...#.#.#\r\n#.###.#.#.#.#.#\r\n#S..#.....#...#\r\n###############";
            //string puzzle = "#################\r\n#...#...#...#..E#\r\n#.#.#.#.#.#.#.#.#\r\n#.#.#.#...#...#.#\r\n#.#.#.#.###.#.#.#\r\n#...#.#.#.....#.#\r\n#.#.#.#.#.#####.#\r\n#.#...#.#.#.....#\r\n#.#.#####.#.###.#\r\n#.#.#.......#...#\r\n#.#.###.#####.###\r\n#.#.#...#.....#.#\r\n#.#.#.#####.###.#\r\n#.#.#.........#.#\r\n#.#.#.#########.#\r\n#S#.............#\r\n#################";
            string puzzle = "#############################################################################################################################################\r\n#...........#.....#...........#.......#...#.......#.#...........#.......#...#.............#.#.....#.........#...#.........#................E#\r\n#.#########.#.#.#.#########.#.###.###.#.###.#.###.#.#.###.#####.#.###.###.#.#.###.#######.#.#.#.#.#.#####.#.#.#.#.#######.#.#.#####.###.#.#.#\r\n#.#.......#...#.#...........#.....#...#.....#.#...#.....#.....#...........................#...#.#.#.....#.#...#...#.....#.#.#.........#...#.#\r\n#.#.#####.#####.###################.#########.#.###.#######.#.#.#.#.#######.###.#.#.#.#########.#####.###.#########.#.#.#.###############.#.#\r\n#.#.#.......#...#...........#.......#.........#...#.#.#...............#...#...#.#.#...........#.....................#.#.........#.......#.#.#\r\n#.#.#.#####.#.###.#####.###.#.#########.#.#######.#.#.#.#.#.#.#######.###.###.#.#.###########.#####.#.#.###.#.#.###.#.#########.#.#####.###.#\r\n#.#.#.#...#.#.#...#...#...#...#.........#.....#...#...#.#.#.#...............#...#...........#.......#.#.#...#.#...#.#.#...#.......#.........#\r\n#.#.###.#.#.#.#.###.#.###.#####.#.###.###.###.#.#######.#.#####.###########.#############.#.#.#######.#.#.#.###.#.#.#.#.#.#.#######.#######.#\r\n#.#.....#.#...#.#...#.#.#.#.......#...#.#...#...#.......#.....#.#.......#.....#.........#.#.#.#.......#.#.#.......................#...#...#.#\r\n#########.###.###.###.#.#.#.#######.###.#.#.#######.#.#######.#.#.#####.#######.#######.###.###.#####.#.#############.#.#.###.###.###.#.#.#.#\r\n#.......#...#.....................#.#.......#.....#.#.#.....#.#.#.#...........#...#...#.#...#...#...#.#.....#.......#.#.#.....#.#...#.#.#.#.#\r\n#.#####.###.###.#####.#.###.#.###.#.#.###.#####.#.#.#.#.###.#.###.###########.###.#.#.#.#.###.###.#.#.#####.#.#####.#.#.#######.###.###.#.###\r\n#.#.#...#...#...#.#...#.#.....#.#...#.#.........#.#.#.....#.#...#.......#...#...#.#.....#.....#...#.#.#.....#.#.....................#...#...#\r\n#.#.#.###.###.###.#.###.#.#.###.#####.###.#.#####.#.#######.###.#.#####.#.#.#.#.#.#.#.#####.###.###.###.#####.#.#.###.#.#.#.#.#.#.###.#####.#\r\n#.#...#.......#...#.#.....#.......#.#...#.#.#.....#...#.....#...#.#.....#.#.#...#.#.......#.#...#...#...#...#.#.#.......#.#...........#.....#\r\n#.#.#########.###.#.#########.###.#.###.###.###.#####.#.#.###.###.#.#.#.#.#.#.###.#######.###.###.###.###.#.#.#.#########.#########.#.#.###.#\r\n#.................#...#.....#.#...#...#...#...#.......#...#...#.....#.#.#.#.#.....#.....#.#...#.#...#.....#...............#.......#...#.#...#\r\n#.#########.#.#.#.###.#.###.#.#.###.#####.###.#########.###.#.#####.#.#.#.#.#########.###.#.###.###.#.###############.###.#.#####.#.#.#.#.#.#\r\n#.........#.#...#.#...#...#...#...#.....#...#...#.....#...#.#.......#...#.#.....#.....#...#.#.#.....#...........#...#...#.#...#.#...#.#...#.#\r\n#.#.#####.#.#####.#.#####.#######.#.###.###.###.#.###.#.#.#.#.#.#########.#####.###.#.#.###.#.#.###############.#.#.###.#.###.#.###.#.#.#.###\r\n#.#.#.....#.#.....#.....#.#...#...#.......#.#...#...#...#.#.#.#.......#...#.........#.#...#.#...#.........#...#...#.....#...#.#...#.#...#...#\r\n#.#.#.#####.###.#######.#.###.#.#####.#.###.#.###.#.###.#.#.#########.#.#.###############.#.###.#####.###.#.#.#########.#####.#.###.#.#.#.#.#\r\n#.#.#.....#...#.......#.#...#...........#...#...#.#...#...#.........#.#.#.........#.......#...#.......#.#.#.#...#.#.....#.....#.#...#.#...#.#\r\n#.#.#.###.###.#######.#.#.#.#############.#####.#.###.###.#########.#.#.#########.#.#########.#########.#.###.#.#.#.#####.#####.#.#####.#.#.#\r\n#.#.#.#.#...#...#.....#.#.#.#.......#...#.#.....#...#...#...#.......#.#.#.....#...#.........#.#.#.........#...#...#.#...#.#.....#.#.....#...#\r\n#.#.#.#.#.#####.#.#####.###.#.#####.#.#.#.#.#####.#.###.###.#.#######.#.#.###.#.#.#########.#.#.#.#########.#######.#.###.#.#.###.#.#.#.#.###\r\n#.#.#...#.....#.#...#...#...#.....#...#.#.#.#.#...#...#.#...#.#.......#...#...#.#.#.#.....#...#.#.#.#.................#...#.#.#...#.#.#.....#\r\n###.###.###.#.#.#.###.###.#.#####.#####.#.#.#.#.#####.#.#.###.#.###########.###.#.#.#.###.#####.#.#.#.#.###############.###.###.###.#.#.#.#.#\r\n#...#.....#...#.#.#...#...#...#...#...#...#.#...#.....#.#.#.#...#...#.......#...#...#.#.....#.....#...........#.........#.....#.....#...#...#\r\n#.#####.#####.#.###.#####.#.###.###.#.#####.#.#####.###.#.#.###.#.###.#######.#######.#.###.#.#####.#.#######.#.#########.###.#####.###.#.#.#\r\n#.......#...#.#.....#...#.#.....#...#...#...#.#.....#...#.#...........#.....#...#.....#.....#.#...#...#...#...#.#.#...#...#.#.........#.#.#.#\r\n#.#####.#.#.#.#######.#.#.#.#####.#####.###.#.#.###.#.#.#.#########.#.#.###.###.#.#########.#.###.#.###.#.#####.#.#.#.#.###.#########.#.#.###\r\n#...#.#...#.#.....#...#...#...#.......#.....#...#...#.#.........#...#...#.....#.....#...#...#...#.#.#.#.#.....#.#...#.#...............#.#...#\r\n###.#.#.###.#.###.#.#.###.###.#.#####.###########.###.#########.#.#.###.#.###.#####.#.#.#.#####.#.#.#.#.#####.#.#####.#######.#.#.#.#####.#.#\r\n#.#.#.#...#.....#.#.#...#...#.#.#.....#.......#...#.#.....#...#...#.......#...#...#...#.#...#...#...#.#.#.....#.....#.........#.#.#.......#.#\r\n#.#.#.#.#.###.#.#.#.###.###.#.###.###.#.###.###.###.#####.#.#############.#.###.#.###.#.###.#.###.###.#.###.#######.#.###.#.###.#.#######.#.#\r\n#...#...#.#.....#.....#...#.#.#...#.....#...#...#.....#...#...............#.#...#...#.#...#...#.#...#.#...#.....#...#.......................#\r\n#.#######.#.#.###########.#.#.#.###.#.#######.###.#####.#####.###.#########.#.#####.#####.#####.###.#.###.#####.#.#####.###.#.#####.#.#.###.#\r\n#...#.....#...#...........#.#.#.#...#.#.....#.#.......#...............#.....#.#...#.#...#.....#...#.#...#.#...#.#...#.#...#.#.#...#...#.#...#\r\n###.#.###.###.#.#.#########.#.#.#.#####.###.#.#####.#.#####.###########.#####.#.#.#.#.#.#.#.#.###.#.#.#.#.#.###.###.#.###.#.#.#.#.###.#.#.###\r\n#...#...#...#.#.#...#.#.....#.#.#...#...#.#.#.....#.#.#...#...#...#...#.#.......#...#.#.#.#.#.....#...#.#.#...#...#.#.......#.#.#...#.#.#.#.#\r\n#.###.#.#####.#.###.#.#.#####.#.#.#.#.###.#.#.#.#.###.#.#.###.#.#.#.#.#.#.###.###.###.#.###.#####.#.#####.###.###.#.###.#####.#.###.###.#.#.#\r\n#.#...#.#.....#...#.#...#.....#.#.#.#.#...#.#...#...#...#...#...#...#...#...#...#...#.#.#...#...#.#.#...#.#...#...#...#...#...#.#.#.....#...#\r\n#.#####.#.#.#.#####.###.#.#####.###.#.#.#.#.#######.#####.#################.###.###.#.#.#.###.###.#.#.#.#.#.#.#.#####.#####.###.#.#########.#\r\n#.#.....#.#.#.....#.......#...#...#.....#.#.......#.#...#...........#.....#.#...#.....#...#.......#.#.#...#.#.............#...#.#...#.......#\r\n#.#.###.#.###.###.#.#######.#.#.#.###.#####.#####.#.#.#.#.#####.#.#.###.#.###.#####.#######.#######.#.#####.#######.#.###.###.#.#.###.#######\r\n#...#...#.......#.#.#.......#.......#.#...#.#.#...#...#...#...#.#.#...#.#.....#.....#...#...#.......#...#.#.......#.#...#.....#.#...#...#...#\r\n###.#########.###.#.###.#.#########.#.#.#.#.#.#.#########.#.#.#.#.###.#.###.#.#.###.#.#.#.#.#.#########.#.#.###.###.###.#######.#.#.###.###.#\r\n#...#...#.....#...#.....#...#...#...#.#.#...#...#.#.....#...#.#.#.#...#.#.#.#.#...#.#.#.....#.#.....#...#.#.#.#.....#.#.#.......#.#...#.#...#\r\n#.###.#.#.###.#.###.#######.#.#.#.###.#.#####.###.#.#.#######.###.#.###.#.#.#.###.#.#.#####.#.#.###.#.###.#.#.#######.#.#.#######.#.###.#.#.#\r\n#...#.#...#.....#...#.........#...#...#.#...#.#...........#.#...#.......#...#...#.#.#.#...#.#.#.#...#.#.....#...#...#...#.#.......#...#...#.#\r\n###.#.#.#########.#.#.#.#########.#.###.###.#.#####.###.#.#.###.#.#######.###.###.#.###.#.###.#.#.###.###.###.#.###.#.#.#.#.#########.#####.#\r\n#...#.#.#...#.....#.#.#.........#.#.#.#...#.#.....#.#...#.....#...#...#...#.#.....#.....#.....#.....#...#.#...#.....#.#...#.....#.....#.....#\r\n#.###.###.#.#.#####.#.#####.###.#.#.#.###.#.#####.###.#.#####.#####.#.#.###.#.#################.###.###.#.#.#.###.###.#.###.#.###.###.#.#####\r\n#.........#.#.#.#...#.#.#...#.#.#.....#.#.#.....#...#.#.#...#.#.....#.#.#...............#.......#.#.....#.#.....#.#...#...#...#...#...#.....#\r\n###.#.#.###.#.#.#.###.#.#.###.#.#####.#.#.#.###.###.#.###.#.###.###.###.#.###############.#######.#######.###.#.###.#####.###.#.###.#.#####.#\r\n#...#...#...#.#.....#...#...#.#.....#...#.#.#...#...#...#.#...#.#.#.#...#.#...#...........#.............#...#.#.....#.#...#...#.....#.....#.#\r\n#########.###.#######.#####.#.#####.#####.#.#.#.#.#####.#.###.#.#.#.#.###.#.#.#.###.#########.#############.#.#######.#.###.#########.###.#.#\r\n#.......#.#.#.......#.#.....#.............#.#.#.#.#...#.#.#.#...#.#...#.#.#.#...#...#...#...#.............#.#.....#...#.#.....#...#.....#...#\r\n#.#####.#.#.#.#####.#.#.#####.#############.#.###.#.#.#.#.#.#####.#####.#.#.#.#######.#.#.#.###.#########.#.#####.###.#.#####.#.#.###.#.###.#\r\n#.....#...#.#.....#.....#.......#.....#.....#.......#...#.#.......#...#...#...........#...#...#...#.....#.#.....#...#.#...#.....#.........#.#\r\n#.###.#####.#####.#####.#####.###.###.#.#.#.###########.#.#.###.#.#.#.#########.#############.###.#.###.#.#####.###.#.###.#######.#######.#.#\r\n#.#...#.....#...#...#...#...#.#...#.#.....#.....#.......#.#.#...#...#...#.....#.....#.....#.#.#...#.#...#.....#.#.....#...........#...#.#.#.#\r\n###.###.#.###.#.#.#.#.#.#.#.###.###.#.#####.###.#.#######.###.###.#.###.#.###.#####.#.###.#.#.#.#.#.#.#####.###.#####.#.###.#.#.###.#.#.#.#.#\r\n#.....#...........#.#.#.#.#.....#...#.......#.#.#.#.#.........#...#.#...#...#...#.....#...#.#.#.#...#.#...#...#...#...#.....#.#.#...#.#...#.#\r\n#.###.#.###########.#.#.#.###.###.#.#######.#.#.#.#.#.#########.###.#.###.#.###.#######.###.#.#.###.#.#.#.###.###.#.#########.#.#.###.#.###.#\r\n#...#.....#.........#.#.#.......#.#...#.....#.#.#...#.........#.....#...#.#.#.#...#...#...#.#...#...#...#...#...#.#.#.#...#...#.#.#.#.#.....#\r\n#.#.#####.#######.###.#.#######.#.#####.#.#.#.#.#######.#.#.#.#########.###.#.###.#.#.###.#.#####.#.#######.###.#.#.#.#.#.#.###.#.#.#.#####.#\r\n#.#.....#.#...#.......#...#...#.#.#.....#.#.#.#.........#...#.........#...#.#...#.#.#.............#.....#...#...#.#...#.#.#...#.#...#...#.#.#\r\n#######.#.#.#.#.###.#.#####.#.#.#.#.#####.#.#.#############.#########.###.#.#.#.#.###########.#######.#.#.#.#.#.#.###.#.#.#.#.#.###.###.#.#.#\r\n#.......#...#.#.#...#.....#.#...#...#...#.#...#.....#.....#.........#...#...#.#.#.......#...#...#.....#...#.#.#.#...#.#.#.#.#...#.#...#.#.#.#\r\n#.###########.#.#.###.###.#.#######.#.#.#.###.#.#.#.#.###.#########.#########.#.#######.#.#####.#.#########.#.#####.###.#.#.#.#.#.###.#.#.#.#\r\n#.#.........#...#.....#.#.#.#.....#...#.#...#...#.#.#.#.#.......#...#.......#.#...#...#.#.....#.#...#.....#.#...#...#...#.#.#.#.....#.#.#...#\r\n#.#.#######.###.#######.#.#.#.###.#####.###.###.#.#.#.#.#######.#.###.###.#.#.###.#.#.#.#####.#.###.#.###.#.#.#.#.###.###.#.#.#######.#.###.#\r\n#.#.#.....#...#.........#.#...#.#.#.....#...#...#.#.#...#...#...#.#...#.#...#...#...#.#.....#.....#.#.#.....#.#.#.#.......#.#.....#...#.....#\r\n#.#.#.###.#.#####.#######.#####.#.#.#####.###.###.###.###.#.#.#.#.#.###.#.#####.#####.#.#.#.#####.#.#.#######.#.#.#.###.#########.#.#######.#\r\n#.#.#.#.#.#.....#.#.......#...#...#.#...#.#...#.#.....#...#...#.#...#.....#.....#.#...#.#.#...#.#...#...#.....#...#.#...........#...#.......#\r\n#.#.#.#.#.#####.#.#.#####.#.#.#.###.#.#.#.#.###.#.#####.#######.#####.#####.#.###.#.###.#.###.#.#.#####.###.#######.###########.#####.#####.#\r\n#.#.#.#.#...#...#.#...#...#.#...#.#.#.#...#.#.........#.#...#...#...#...#.#.#...#...#...#.#...#...#...#...#.#...#.....#.#.....#...#...#...#.#\r\n#.###.#.###.#.###.###.###.#.#####.#.#.#####.###########.###.#.###.#.###.#.#.###.#####.#.#.###.#####.#.###.#.#.#.#.###.#.#.###.###.#.###.###.#\r\n#.......#...#...#...#...#.#...#.....#.#.#...#.....#...#...#.#...#.#.....#.....#.......#.....#.#...#.#.#...#.#.#...#...#.#.....#...#.#.....#.#\r\n#.#######.###.#.###.#.#.#.###.###.###.#.#.###.###.#.#.#.#.#.###.#.#############.###########.#.#.#.#.#.#.###.#.#####.###.#.#.#.#.###.#####.#.#\r\n#...#...#...#.#.....#.#.#...#.......#.#...#.....#...#.#.#.#...#.#.............#.#.........#.#...#.#.#...#...#.....#.#.....#.#.#.#.......#...#\r\n#####.#.###.#.#######.#.###.###.#####.#.###.###.#####.#.#.###.#.#############.#.#####.###.#.#####.#.#####.###.#.#.#.###.###.###.#######.#.###\r\n#.....#...#.#.#.......#.#.#.#.#.......#...#.#...#...#.#.....#.......#...#...#.#.......#.....#.....#.#.....#.#...#.#...#.................#...#\r\n#.#.#####.#.#.#.#####.#.#.#.#.#########.#.#.#.###.#.#.#####.#####.#.#.###.#.#.#####.#####.#.#.#####.#.#####.#.#####.#.#####################.#\r\n#.#.....#...#.#.#.....#.#.........#.......#.#...#.#.#.....#.......#...#...#...#...#.#...#...#.#.....#.#.......#...#.#.#...........#...#.....#\r\n#.#.###.#####.#.###.###.#.#########.###########.#.#.#####.#.#####.#.###.#######.###.#.#.#####.#.#.###.#.#######.#.###.#.#########.#.#.#.#####\r\n#.#.........#.#...#.#...#.#...#.....#.............#...#...#.#...#.#.#...#...........#.#...#...#.#.#.#.#...#...#.#...#...#.........#.#.#...#.#\r\n#.#.#.#######.#.#.###.#.###.#.#.#####.###.###.#####.#.#.###.#.#.#.#.#.###.###########.###.#.#####.#.#.###.#.#.#.###.#####.#########.#####.#.#\r\n#.#.#.#.........#.....#.#...#...#.#...#...#.......#.#.#.#...#.#.#.#.#.#.#.#...#.......#...#.......#.#...#...#.#.#.#.......#.........#.....#.#\r\n#.#.###.#########.#.#####.#######.#.#.#.#########.###.#.#####.#.#.#.#.#.#.#.#.#.#######.###########.###.#####.#.#.#########.#.#######.###.#.#\r\n#.#...#...........#.......#...#...#.#.#.....#...#.....#.......#.#...#.......#.#...#...#.#.........#.....#.....#.#...#.....#.#...#...#.#.....#\r\n#.#.#.#######.#.###.#######.###.#.#.#.#####.#.#.###############.###.#.#.###.###.#.#.#.#.###.#####.#.#.###.#####.###.#.###.#.###.#.#.#.###.#.#\r\n#.#.#.....#...#...#...#.....#...#.........#...#.#.....#.....#.#.....#...#...#.....#.#.#...#.#...#.#...#.#.#...#...#...#...#...#.......#...#.#\r\n#.###.###.#.###.#.###.###.###.#####.###########.#.###.#.###.#.#####.###.#.###.#.###.#.###.#.#.#.#.###.#.#.#.#####.#.###.#.###.#########.#.###\r\n#.....#...#.#...#...#...#.....#...#.#...#.......#.#.....#.#...#...#.#.#.#...#...#...#...#.#.#.#...#...#.....#.....#...#.#.#...#.........#...#\r\n###.#.###.#.#.###.#.###.#####.#.#.###.#.#.#######.#######.###.###.#.#.#.#####.#.#.###.#.#.#.#.#.###.#########.#######.#.#.#.#########.#.#.#.#\r\n#...#.#.....#...#.#...#.....#.#.#...#.#.#.#.....#...#...#.........#.#.#.#...#.#.#.......#.#...#.#...#.........#.#.....#.#...#.......#.#...#.#\r\n#.###.#.#.###.#.#.#.#######.###.#.#.#.#.#.#.###.#.#.#.#.###########.#.#.#.#.###.#.#.#####.#.###.#.###.#########.#.#####.#####.#####.#.#####.#\r\n#.#...#.#.#...#.#.#.......#.....#...#.#.#.#...#.....#.#.....#...........#.#.....#.#.....#.#.#...#.....#.........#.......#.....#...#.#.#.....#\r\n#.#.#.#.#.#.###.#.#####.#.#######.###.#.#.#.#####.#.#.#####.#.#.#######.#.#########.###.#.#.#.#########.###############.#.###.#.###.#.#.###.#\r\n#.#.......#.#...#.....#.#.#.......#...#.#.#.#...#.#...#...#...#...................#.#.#...#.#.....#.....#.............#.#.#.#.#.....#.#.#...#\r\n#.#.#.###.#.#.#####.#.###.#.#######.###.#.#.#.#.#.#####.#######.#.#.#####.#####.#.#.#.#####.###.###.###.#.#######.#####.#.#.#.#.#####.#.#.###\r\n#.....#.....#.#...#.#.#...#.....#...#.....#.#.#.#.#...#.........#.#...#.....#.....#.#.....#.#.#.......#.#.............#.#...#.#.#.......#.#.#\r\n#.###.#.#.###.#.#.#.#.#.#######.#.#.#.#######.#.#.#.###.#######.#.###.#####.#.#####.#.###.#.#.#########.#.#.#########.#.###.#.#.#.###.###.#.#\r\n#.....#...#...#.#.#.#.#.#.....#.#.#.#.#...#...#.#.#.#...#.....#.#...#.....#.#.#.#...#.#...#.......#.....#.#.........#...#...#...............#\r\n#.###.###.###.#.#.###.#.#.#.#.#.#.#.###.#.#.###.#.#.#.###.#####.#########.###.#.#.###.#.#####.#####.###.#.###.###.#.#########.#####.#.#.###.#\r\n#...............#.....#...#.#.#.#.#.#...#...#...#.#.#.....#.....#.......#.....#...#...#.......#...#.#.#.#...#.#...#...#.....#.#.....#.....#.#\r\n#.#.#.###.#####.#######.###.###.#.#.#.#######.###.#.###.#.#.#.###.###.#####.###.###.#######.###.#.#.#.#.###.###.#####.###.#.#.#.#####.#####.#\r\n#.#.#.....#.....#...#...#.#.....#.#.#.....#...#.#.#.......#.#.#...#.#.........#.#...#.#...#...#.#...#...#.#...#.#.........#...#...#.........#\r\n#.#.#######.#####.#.#.###.#######.#.#####.#.###.#.#.#######.###.###.#########.#.#.###.#.#.#.###.#####.###.###.#.#.###############.#.#.#######\r\n#...#.....#...#...#...#...........#.....#.#.......#.......#...#.#.........#.#...#.#.....#.#.#...#.....#.....#...#.......#.........#.#.......#\r\n###.#.###.###.#.###.#.#.#######.#.###.#.#.###.#.#####.#######.#.#.#####.#.#.#####.#.###.#.###.#####.###.#.#######.#.#####.#####.#.#.#.#####.#\r\n#...#.#.#.....#.#.#...#...#.....#...#.#...#...#.....#.#...#...#.#.#.....#...#...#...#...#...#.....#.#.............#.#.....#.#...#.#.#.....#.#\r\n#####.#.###.###.#.#####.#.#.#######.#######.#######.###.#.#.#.#.#.#.###.#####.#.#.###.#####.#.###.#.#.###.#####.#.#.#.#####.#.#####.#####.#.#\r\n#.....#.......#.#.....#...#.#...#.#.......#...#.....#...#...#.#.#.#.#...#.....#...#...#.....#...#...#...#.......#.#.#...#...#.....#.#.#...#.#\r\n#.#####.###.#.#.#.#.#.#####.#.#.#.#.#.###.#.#.#.#####.###.#####.#.#.###.#.#########.###.#########.#.#.#.#.#.###.#.#.###.#.#.#####.#.#.#.###.#\r\n#...#...#...#.#.#.#.#.....#...#.#.#.#.#.#...#.#.#.....#.......#.#.#...#.#.....#.#...#.....#.......#.......#.#...#.#...#...#.#...#...#...#...#\r\n###.#.#.#.#.###.#.#.#####.###.#.#.#.#.#.#####.#.#.###.#.#####.#.#.###.#######.#.#.#######.#.###.#####.#####.#.###.#.#######.#.#.###.#####.#.#\r\n#...............#.#.#...#...#.#.#.....#.........#.#...#.#.....#.#.#.#.......#...#.#...#.....#.#...........#.....#.#.....#...#...............#\r\n#.#########.#.#.###.#.#####.###.#########.#######.#.#.#.#.#####.#.#.#######.###.#.#.#.#######.#.#######.#.#######.#####.#.#########.#.#####.#\r\n#.#...........#.....#.....#.....#.......#.#...#...#.#.#.#.......#.#.......#...#...#.#.............#.....#.........#.....#.#.........#.....#.#\r\n#.#.#######.#.###########.###.###.#####.#.#.#.#####.#.#.#######.#.#.#######.###.#.#.#####.#########.###############.#.#.#.###.#####.#.#.#.#.#\r\n#.#.......#.....#.........#...#...#...#.#...#...#...#.#.#...#.......#...........#...#.....#.........#.......#.......#...#...#.#.....#...#.#.#\r\n#.###.###.#.#####.###.#####.###.#.#.###.#######.#.#####.#.#.#.#.#####.#####.#.#######.#.#.#.###########.###.#.#############.#.#.###.#.###.#.#\r\n#...#...#...........#.......#...#.....#...#...#...#...#...#.#.#.#.....#...#.#.#...#...#.................#...#...#.........#...#.....#.#...#.#\r\n#.#.#######.#######.#####.###.###.###.###.#.#.#.###.#.#####.#.#.#.#####.#.#.#.#.#.#.#####.###.###.###.#####.###.#.#####.###.###.###.#.#.###.#\r\n#.#...#.......#...#.#...#.#...#.......#.#...#.#.#...#...........................#.#...#...#...#...#...#...#.#...#.#.................#.#.#...#\r\n#.###.#.#####.#.#.###.#.#.#.###.#.###.#.#####.#.#.#######.#.#.#.###.#.#.#####.#.#.###.#.#.###.#.#######.#.###.#.#.#.#.###.###.#.#.#.#.#.###.#\r\n#...#...#...#...#.#...#.#.#.#...#...............#...#...#...#.#.....#...#...#.#.#...#.#.....#.#.....#...#.....#.#.#.#...#.....#.#...#.#...#.#\r\n###.#####.#.#####.#.###.#.#.#.#.#####.#####.#.#.###.#.#.#####.#.#####.###.#.#.#.#####.###.#.#.#####.#.#####.#####.#.#####.#####.#.#.#####.###\r\n#...#.....................#.#.#.#...#.#...#.#.#.#...#.#.......................#.#...#.....#.............#...#.....#...#.......#.#.#.....#...#\r\n#.#####.###.#.#.#.###.#.#.#.#.#.#.#.###.#.###.###.###.#.#####.#.#.###.#######.#.#.#.###.#.#.#####.#.###.#.###.#######.#.#.#.###.#.#.#.#.#.#.#\r\n#...................#.#.#.#.#.#...#.....#.#...#.....................#.#.......#.#.#.....#.#.#...#.#...#.#.#...#.....#...#.#.#...#.....#.#.#.#\r\n#########.###.#.#.###.#.###.#############.#.###.###.#######.#.#.#.#.#.#.#######.#.###.###.#.#.#.###.###.#.#.###.###.#####.#.#.#.#######.###.#\r\n#.....#...#...#.#.#...#...#.#...#...#.....#.#...#...#.....#.#.....#.#.#.#.....#.#.#...#.....#.#.....#...#.#.#...#.#...#...#.#...#.....#.....#\r\n#.###.#.#####.#.#.#.#####.#.#.#.#.#.#.###.#.#.###.###.###.#.#.#.#.#.###.###.#.#.#.#####.#.###.#####.#.#####.###.#.###.#.#.#.###.#.#.###.###.#\r\n#S..#.........#.........#.....#...#...#...#...#.......#...#.......#.........#...#.............#...............................#...#.........#\r\n#############################################################################################################################################";

            //Aqui se guardara las intersecciones que se encuentren, la decision tomada, la direccion original y los pasos que llevaba

            int[][] directions = new int[4][] { new int[] { 0, 1 }, new int[] { 1, 0 }, new int[] { 0, -1 }, new int[] { -1, 0 } };
            int[] startPos = new int[] { 0, 0 };


            List<List<string>> originalMap = puzzle.Split("\r\n").Select(x => x.Select(y => y.ToString()).ToList()).ToList();
            //Find the start position
            for (int y = 0; y < originalMap.Count; y++)
            {
                for (global::System.Int32 x = 0; x < originalMap[y].Count; x++)
                {
                    if (originalMap[y][x] == "S")
                    {
                        startPos = new int[] { y, x };
                        break;
                    }
                }
                if (startPos[0] != 0)
                {
                    break;
                }
            }
            try
            {
                int bestFootResult = Int32.MaxValue;
                string bestMap = "";
                int loopCount = 0;
                while (true)
                {
                    loopCount++;
                    //Start loop values
                    bool isFinished = false;
                    List<int[][]> intersecctionHistoy = new List<int[][]>();
                    List<int[]> positionHistory = new List<int[]>();
                    int[] currentPosition = new int[] { startPos[0], startPos[1] };
                    int[] currentDirection = directions[0].Clone() as int[];
                    int currentFoots = 0;
                    int countLol = 0;

                    //Clean map
                    for (int y = 0; y < originalMap.Count; y++)
                    {
                        for (global::System.Int32 x = 0; x < originalMap[y].Count; x++)
                        {
                            if (originalMap[y][x] == "*")
                            {
                                originalMap[y][x] = ".";
                            }
                        }
                    }

                    //Main loop
                    while (!isFinished)
                    {
                        countLol++;
                        //Detercar si esta en una interseccion
                        List<int[]> possibleDirections = new List<int[]>();
                        for (int i = 0; i < 3; i++)
                        {

                            int[] direction = directions[(Array.IndexOf(directions, currentDirection) + (i - 1 + 4)) % 4];
                            int[] nextPosition = new int[] { currentPosition[0] + direction[0], currentPosition[1] + direction[1] };
                            //Wall detector
                            if (originalMap[nextPosition[0]][nextPosition[1]] == "#")
                            {
                                continue;
                            }
                            else if (originalMap[nextPosition[0]][nextPosition[1]] == "$")
                            {
                                continue;
                            }
                            //Old interseccion

                            if (originalMap[nextPosition[0]][nextPosition[1]] == "E")
                            {
                                isFinished = true;
                                break;
                            }

                            if (originalMap[nextPosition[0]][nextPosition[1]] == "." || originalMap[nextPosition[0]][nextPosition[1]] == "*")
                            {
                                possibleDirections.Add(direction);
                                continue;
                            }
                        }

                        if (isFinished)
                        {
                            //Count direction changes
                            int directionChanges = 0;
                            for (int i = 0; i < intersecctionHistoy.Count; i++)
                            {
                                if (intersecctionHistoy[i][2][0] != intersecctionHistoy[i][1][0] || intersecctionHistoy[i][2][1] != intersecctionHistoy[i][1][1])
                                {
                                    directionChanges++;
                                }
                            }
                            positionHistory.Add(currentPosition);
                            currentFoots++;
                        }
                        //Intersección
                        else if (possibleDirections.Count > 1)
                        {
                            //Comprobar que esa posicion fue pasada o no
                            int usedIntersecction = intersecctionHistoy.FindIndex(x => x[0][0] == currentPosition[0] && x[0][1] == currentPosition[1]);
                            //Si repite intersección vuelve a ella
                            if (usedIntersecction != -1)
                            {
                                currentDirection = intersecctionHistoy[usedIntersecction][2];
                                currentPosition = intersecctionHistoy[usedIntersecction][0];
                                currentFoots = intersecctionHistoy[usedIntersecction][3][0];

                                //Eliminar los pasos que se repiten
                                int pHistoryIdx = positionHistory.FindIndex(x => x[0] == currentPosition[0] && x[1] == currentPosition[1]);
                                if (pHistoryIdx != -1)
                                {
                                    positionHistory.RemoveRange(pHistoryIdx, positionHistory.Count - pHistoryIdx);
                                }
                                intersecctionHistoy.RemoveRange(usedIntersecction, intersecctionHistoy.Count - usedIntersecction);
                            }
                            //Elige dirección
                            else
                            {
                                int days = DateTime.Now.Microsecond;
                                Random rnd = new Random(days);
                                int index = rnd.Next(0, 100000) % (possibleDirections.Count);
                                //Comprueba si esta dirección ya fue tomada
                                if (originalMap[currentPosition[0] + possibleDirections[index][0]][currentPosition[1] + possibleDirections[index][1]] == "*")
                                {
                                    Console.WriteLine("Repetida");
                                    continue;
                                }
                                if (possibleDirections[index][0] != currentDirection[0] || possibleDirections[index][1] != currentDirection[1])
                                {
                                    currentFoots += 1000;
                                }


                                intersecctionHistoy.Add(new int[][] { currentPosition, possibleDirections[index], currentDirection, new int[] { currentFoots } });

                                currentDirection = possibleDirections[index];
                                currentPosition = new int[] { currentPosition[0] + currentDirection[0], currentPosition[1] + currentDirection[1] };
                                positionHistory.Add(currentPosition);
                                currentFoots++;
                            }
                        }
                        //No hay elecciones posibles
                        else if (possibleDirections.Count == 1)
                        {
                            int[] nextPosition = new int[] { currentPosition[0] + possibleDirections[0][0], currentPosition[1] + possibleDirections[0][1] };
                            if (originalMap[nextPosition[0]][nextPosition[1]] == "*")
                            {
                                int hitoryInterIdx = intersecctionHistoy.FindIndex(x => x[0][0] == nextPosition[0] && x[0][1] == nextPosition[1]);
                                int hitoryPosIdx = positionHistory.FindIndex(x => x[0] == nextPosition[0] && x[1] == nextPosition[1]);

                                if (hitoryInterIdx != -1)
                                {
                                    currentPosition = intersecctionHistoy[hitoryInterIdx][0];
                                    currentDirection = intersecctionHistoy[hitoryInterIdx][2];
                                    intersecctionHistoy.RemoveRange(hitoryInterIdx, intersecctionHistoy.Count - hitoryInterIdx);
                                }

                                if (hitoryPosIdx != -1)
                                {
                                    positionHistory.RemoveRange(hitoryPosIdx, positionHistory.Count - hitoryPosIdx);
                                }
                            }
                            else
                            {
                                if (possibleDirections[0][0] != currentDirection[0] || possibleDirections[0][1] != currentDirection[1])
                                {
                                    currentFoots += 1000;
                                }
                                currentDirection = possibleDirections[0];
                                currentPosition = new int[] { currentPosition[0] + currentDirection[0], currentPosition[1] + currentDirection[1] };
                                positionHistory.Add(currentPosition);
                                currentFoots++;
                            }


                        }
                        //No hay direcciones
                        else
                        {
                            currentPosition = intersecctionHistoy.Last()[0];
                            currentDirection = intersecctionHistoy.Last()[2];
                            currentFoots = intersecctionHistoy.Last()[3][0];
                            originalMap[currentPosition[0] + intersecctionHistoy.Last()[1][0]][currentPosition[1] + intersecctionHistoy.Last()[1][1]] = "$";
                            //Borrar historial
                            intersecctionHistoy.RemoveAt(intersecctionHistoy.Count - 1);
                            int pHistoryIdx = positionHistory.FindIndex(x => x[0] == currentPosition[0] && x[1] == currentPosition[1]);
                            if (pHistoryIdx != -1)
                            {
                                positionHistory.RemoveRange(pHistoryIdx, positionHistory.Count - pHistoryIdx);
                            }
                        }

                        if (countLol % 1000000 == 0)
                        {
                            Console.Clear();
                            for (int y = 0; y < originalMap.Count; y++)
                            {
                                for (global::System.Int32 x = 0; x < originalMap[y].Count; x++)
                                {
                                    int positionHistoryIdx = positionHistory.FindIndex(z => z[0] == y && z[1] == x);

                                    if (currentPosition[0] == y && currentPosition[1] == x)
                                    {
                                        Console.ForegroundColor = ConsoleColor.Red;
                                        Console.Write("X");
                                        Console.ResetColor();
                                    }
                                    else if (positionHistoryIdx != -1)
                                    {
                                        Console.ForegroundColor = ConsoleColor.Yellow;
                                        Console.Write("*");
                                        Console.ResetColor();
                                    }
                                    else
                                    {
                                        Console.Write(originalMap[y][x]);
                                    }
                                }
                                Console.Write("\r\n");
                            }
                            Console.WriteLine("Count: " + countLol);
                            Thread.Sleep(100);


                        }

                    }
                    if (bestFootResult > currentFoots)
                    {
                        bestFootResult = currentFoots;
                        bestMap = "";
                        for (int y = 0; y < originalMap.Count; y++)
                        {
                            for (global::System.Int32 x = 0; x < originalMap[y].Count; x++)
                            {
                                int positionHistoryIdx = positionHistory.FindIndex(z => z[0] == y && z[1] == x);
                                if (positionHistoryIdx != -1)
                                {
                                    bestMap += "*";
                                }
                                else
                                {
                                    bestMap += originalMap[y][x];
                                }
                            }
                            bestMap += "\r\n";
                        }
                        Console.Clear();
                        Console.WriteLine("Best result: " + bestFootResult);
                        Console.WriteLine(bestMap);
                        Console.WriteLine("Loop count: " + loopCount);
                        Thread.Sleep(100);
                    }
                    Thread.Sleep(1);
                }
            }
            catch (Exception e)
            {

            }

        }
    }
}